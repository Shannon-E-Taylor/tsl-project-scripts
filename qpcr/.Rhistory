reference_gene = "ref"
)
res1
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref", plot = TRUE
)
res1
pcr_test(tidy_ct, group_var = group_var, reference_gene = 'ref', reference_group = "egfp", test = "t.test")
?pcr_test
?pcr_analyze
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref", plot = TRUE,
method = "delta_ct"
)
res1
ggplot(res1, aes(x = group, y = relative_expression))
library(ggplot2)
ggplot(res1, aes(x = group, y = relative_expression))
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
method = "delta_ct"
)
ggplot(res1, aes(x = group, y = relative_expression))
res1
ggplot(res, aes(x = group, y = relative_expression)) +
geom_col() +
labs(x = '', y = 'Relative mRNA expression')
ggplot(res1, aes(x = group, y = relative_expression)) +
geom_col() +
labs(x = '', y = 'Relative mRNA expression')
# locate and read data
fl <- system.file('extdata', 'ct4.csv', package = 'pcr')
ct4 <- readr::read_csv(fl)
# make group variable
group <- rep(c('control', 'treatment'), each = 12)
res <- pcr_analyze(ct4,
group_var = group,
reference_gene = 'ref',
reference_group = 'control')
ggplot(res, aes(x = group, y = relative_expression)) +
geom_col() +
labs(x = '', y = 'Relative mRNA expression')
ggplot(res1, aes(x = group, y = relative_expression)) +
geom_col()
ct4
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref"
)
ggplot(res1, aes(x = group, y = relative_expression)) +
geom_col()
ggerrorplot(res1, aes(x = group, y = relative_expression)) +
ggerrorplot(res1, aes(x = group, y = relative_expression))
library("ggpubr")
ggerrorplot(res1, aes(x = group, y = relative_expression))
ggerrorplot(res1, x = group, y = relative_expression)
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref"
)
res1
ggerrorplot(res1, x = group, y = relative_expression)
ggplot(res1, aes(x = group, y = relative_expression)) +
+     geom_col()
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col()
ggerrorplot(res1, x = group, y = relative_expression)
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() + geom_errorbar()
?pcr_analyse
?pcr_analyze
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() + geom_errorbar(error)
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() + geom_errorbar(res1$error)
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref", plot = TRUE
)
res1
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref", plot = TRUE,
facet = TRUE
)
res1
browseVignettes("pcr")
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() +
geom_errorbar(aes(ymin = relative_expression - group, ymax = relative_expression + group))
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref"
)
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() +
geom_errorbar(aes(ymin = relative_expression - group, ymax = relative_expression + group))
res1$relative_expression
res1$group
res1
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() +
geom_errorbar(aes(ymin = relative_expression - error, ymax = relative_expression + error))
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() +
geom_errorbar(aes(ymin = (relative_expression - error), ymax = (relative_expression + error)))
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() +
geom_errorbar(aes(ymin = lower, ymax = upper))
tidy_ct$L3 <- NULL
tidy_ct$R1 <- NULL
tidy_ct$Gene <- NULL
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref"
)
ggerrorplot(res1, x = group, y = relative_expression)
ggplot(res1, aes(x = group, y = relative_expression)) + geom_col() +
geom_errorbar(aes(ymin = lower, ymax = upper))
res1
ggplot(res1, aes(x = group, y = relative_expression))  +
geom_errorbar(aes(ymin = lower, ymax = upper))
ggplot(res1, aes(x = group, y = relative_expression))  +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_jitter()
tidy_ct
ggplot(res1, aes(x = group, y = relative_expression))  +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_jitter(tidy_ct, aes(x=x, y = y))
?geom_jitter
ggplot(res1, aes(x = group, y = relative_expression))  +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_jitter(data = tidy_ct)
ggplot(res1, aes(x = group, y = relative_expression))  +
geom_errorbar(aes(ymin = lower, ymax = upper)) +
geom_jitter(data = tidy_ct, mapping = aes(x=x, y=y))
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
plot = TRUE
)
res1
pcr_test(tidy_ct, group_var = group_var,
reference_group = "egpf",
reference_gene = "ref",
test = "t.test")
tidy_ct
pcr_test(tidy_ct, group_var = group_var, reference_gene = 'ref', reference_group = "egfp", test = "t.test")
pcr_test(tidy_ct, group_var = group_var,
reference_gene = 'ref',
reference_group = "egfp",
test = "t.test")
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
plot = TRUE,
geom_jitter
)
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
plot = TRUE,
geom_jitter()
)
res1
?pcr_test
pcr_test(tidy_ct, group_var = group_var,
reference_gene = 'ref',
reference_group = "egfp",
test = "lm")
pcr_test(tidy_ct, group_var = group_var,
reference_gene = 'ref',
reference_group = "egfp",
test = "wilcox.test")
citation("pcr")
citation("ggplot2")
mean_plot <- ggerrorplot(means, x="class", y = "x",
add = "jitter",
add.params = list(color="darkgrey"),
desc_stat = "mean_ci") +
ggtitle("Technical replicates") +
vm.width.layer
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library("ggplot2")
library("ggsignif")
library("dplyr")
library("gridExtra")
library("effsize")
library("ggpubr")
###########
#FUNCTIONS#
###########
import_data <- function(num){
df <- read.csv(paste(as.character(num), "b_transposed.csv", sep = ""), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
make_df <- function(df, class, bio_rep){
new.df <- NULL #initialize df
for (i in 2:ncol(df)){
new.df <- rbind(new.df, data.frame(raw = df[,i],
tech_rep = colnames(df[i]),
bio_rep = bio_rep,
class = class,
arbit_n = toString(i)))
}
return(new.df)
}
# This assumes input is fine. Default: get the mean, but overridable.
get_technical_means <- function(df, func = mean){
means <- aggregate(df$raw,
list(tech_rep = df$tech_rep,
bio_rep = df$bio_rep,
class = df$class),
FUN = func,
na.rm = TRUE)
}
##########
#GGSTYLES#
##########
gglayer <- list(geom_boxplot(outlier.shape = NA),
geom_signif(comparisons = list(c("tsl-", "egfp-")),
textsize = 5,
test = t.test),
scale_fill_manual(values = c("white", "#EB7F00")),
theme(legend.position = "none"),
xlab(element_blank())
)
vm.width.layer <-   list(ylab("VM width (nm)"),
xlab(element_blank()),
stat_compare_means(aes(group = class), method = "t.test"),
theme(axis.title.x = element_blank()),
ylim(c(0,200))
)
#save for poster
#ggsave("width_plot.png", plot = width_plot, width = (19.5/2), height = 14.6, units = 'cm')
#ggsave("holes_plot.png", plot = holes_plot, width = (19.5/2), height = 14.6, units = 'cm')
#getwd()
########
#SCRIPT#
########
zero.df <- make_df(import_data(0), "tsl-", "zero")
three.df <- make_df(import_data(3), "egfp-", "three")
four.df <- make_df(import_data(4), "egfp-", "four")
five.df <- make_df(import_data(5), "egfp-", "five")
seven.df <- make_df(import_data(7), "tsl-", "seven")
nine.df <- make_df(import_data(9), "tsl-", "nine")
#this is an outlier. Permanently delete it.
five.df <- five.df[!five.df$tech_rep=="17500x_j.tif", ]
#Remove data from the edge of oocytes
remove_zero <- (c("74oox_ad.tif", "5800x_y.tif", "7400x_ac.tif",
"7400x_g.tif", "7400x_h.tif","7400x_u.tif",
"9700x_n.tif"))
remove_three <- c("5800x_l.tif", "13500x_n.tif")
remove_five <- c("7400x_l.tif", "7400x_r.tif", "9700x_m.tif")
remove_seven <- c("74oox_g.tif", "7400x_r.tif")
remove_nine <- c("7400x_b.tif")
meta.df <- NULL
meta.df <- rbind(filter(zero.df, !tech_rep %in% remove_zero),
filter(three.df, !tech_rep %in% remove_three),
four.df,
filter(five.df, !tech_rep %in% remove_five),
filter(seven.df, !tech_rep %in% remove_seven),
filter(nine.df, !tech_rep %in% remove_nine))
means <- get_technical_means(meta.df)
agg_means <- aggregate(means$x,
list(bio_rep = means$bio_rep,
class = means$class),
mean)
#factorise class to hopefully get things in right order for ggplot
means$class <- factor(means$class, levels = c("egfp-", "tsl-"))
agg_means$class <- factor(agg_means$class, levels = c("egfp-", "tsl-"))
#statistics...
biol_cohens <- cohen.d(d = agg_means[agg_means$class == "tsl-",]$x,
f = agg_means[agg_means$class == "egfp-",]$x)
tech_cohens <- cohen.d(d = means[means$class == "tsl-",]$x,
f = means[means$class == "egfp-",]$x)
mean_plot <- ggerrorplot(means, x="class", y = "x",
add = "jitter",
add.params = list(color="darkgrey"),
desc_stat = "mean_ci") +
ggtitle("Technical replicates") +
vm.width.layer
aggregated_plot <- ggerrorplot(agg_means, x="class", y = "x",
add = "jitter",
desc_stat = "mean_ci",
add.params = list(color="darkgrey")) +
ggtitle("Biological replicates") +
vm.width.layer
grid.arrange(aggregated_plot, mean_plot, nrow = 1)
tidy_ct
source('~/Documents/tsl-project/qpcr/tsl-qpcr-analysis.R', echo=TRUE)
library("pcr")
library("tidyr")
library("dplyr")
library("ggpubr")
setwd("~/Documents/tsl-project/qpcr/")
ct1 <- readr::read_csv("st_qPCR_1.30.18.csv")
#clean ct1
ct1 <- data.frame(Target = ct1$Target, Sample = ct1$Sample, CqMean = ct1$`Cq Mean`)
ct1 <- distinct(ct1)
ct1 <- ct1[ct1$Target != "E3", ] #E3 failed
ct1 <- ct1[ct1$Sample != "2", ]
ct1 <- ct1[ct1$Sample != "4", ]
ct1 <- ct1[ct1$CqMean != 0.0000, ] #remove null values
#tidy it!
tidy_ct <- spread(ct1, key = "Target", value = "CqMean")
tidy_ct <- separate(tidy_ct, col = Sample,
sep = "[:digit:]", into = "Gene")
tidy_ct
group_var <- rep(c('egfp', 'tsl'), each = 3)
#calculate reference gene means
tidy_ct$ref <- rowMeans(tidy_ct[c('L3', 'R1')], na.rm=TRUE)
tidy_ct$L3 <- NULL
tidy_ct$R1 <- NULL
tidy_ct
delta_CT_egfp <-  mean(tidy_ct$ref[tidy_ct$Gene == "egfp"]) - mean(tidy_ct$Tsl[tidy_ct$Gene == "egfp"])
delta_CT_egfp
delta_CT_egfp <-  mean(tidy_ct$ref[tidy_ct$Gene == "egfp"]) - mean(tidy_ct$Tsl[tidy_ct$Gene == "egfp"])
delta_CT_tsl <-  mean(tidy_ct$ref[tidy_ct$Gene == "tsl"]) - mean(tidy_ct$Tsl[tidy_ct$Gene == "tsl"])
delta_CT_tsl
double_delta_ct <- delta_CT_tsl - delta_CT_egfp
double_delta_ct
2^double_delta_ct
tidy_ct
tidy_ct$rel_exp <- tidy_ct$Tsl - tidy_ct$ref
tidy_ct
ggplot(tidy_ct, aes(x = Gene, y = rel_exp)) + geom_jitter()
ggpubr::ggerrorplot(tidy_ct, x="Gene", y = "rel_exp", add = "jitter", desc_stat = "mean_ci")
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
plot = TRUE,
geom_jitter()
)
res1
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
plot = TRUE
)
res1
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
#plot = TRUE
)
res1
citation("pcr")
res1$relative_expression - res1$error
ggpubr::ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = class), method = "t.test"),
ggpubr::ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = class), method = "t.test")
ggpubr::ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = class), method = "t.test")
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = class), method = "t.test")
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test")
tidy_ct$rel_exp <- tidy_ct$Tsl - tidy_ct$ref
tidy_ct
ct
ct1
tidy_ct
mean(tidy_ct$rel_exp[tidy_ct$Gene == "tsl"])
mean(tidy_ct$rel_exp[tidy_ct$Gene == "egpf"])
mean(tidy_ct$rel_exp[tidy_ct$Gene == "egfp"])
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab("$/Delta")
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab("$/Delta$")
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab("$\delta$")
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(delta))
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(Delta))
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(paste(Delta, " ", C_T)))
?expression
ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(paste(Delta, " ", C[T])))
res1
tidy_ct
fake_data <- data.frame(my_gene = c(24, 25, 25, 25, 29, 27), "reference_gene" = c(18, 19, 19, 18, 21, 20))
fake_data
groups <- c("control", "control", "control", "sample", "sample", "sample)"
groups
groups <- c("control", "control", "control", "sample", "sample", "sample")
groups
pcr_test(fake_data, reference_gene = "reference_gene", reference_group = "control")
pcr_test(fake_data, reference_gene = "reference_gene", reference_group = "control", group_var = groups)
tidy_ct
tidy_ct$rel_exp <- NULL
tidy_ct$Gene
tidy_ct$Gene <- NULL
tidy_ct
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref"#,
#plot = TRUE
)
res1
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref"
plot = TRUE
)
res1 <- pcr_analyze(tidy_ct,
group_var = group_var,
reference_group = "egfp",
reference_gene = "ref",
plot = TRUE
)
res1
pcr_analyze(fake_data, reference_gene = "reference_gene", reference_group = "control", group_var = groups)
pcr_analyze(fake_data, reference_gene = "reference_gene",
reference_group = "control", group_var = groups,
plot = TRUE)
output <- pcr_analyze(fake_data, reference_gene = "reference_gene",
reference_group = "control", group_var = groups)
output$relative_expression - output$error
output$relative_expression + output$error
fake_data
fake_data_highly_expressed <- data.frame(my_gene = c(24, 25, 25, 20, 20, 20),
reference_gene = c(18, 19, 19, 18, 21, 20))
pcr_analyze(fake_data_highly_expressed, reference_gene = "reference_gene",
reference_group = "control", group_var = groups)
pcr_analyze(fake_data_highly_expressed, reference_gene = "reference_gene",
reference_group = "control", group_var = groups, plot = TRUE)
fake_data_highly_expressed <- data.frame(my_gene = c(24, 25, 25, 23, 22, 23),
reference_gene = c(18, 19, 19, 18, 21, 20))
pcr_analyze(fake_data_highly_expressed, reference_gene = "reference_gene",
reference_group = "control", group_var = groups, plot = TRUE)
pcr_analyze(fake_data, reference_gene = "reference_gene",
reference_group = "sample", group_var = groups)
pcr_analyze(fake_data, reference_gene = "reference_gene",
reference_group = "sample", group_var = groups, plot = TRUE)
pcr_analyze(fake_data_highly_expressed, reference_gene = "reference_gene",
reference_group = "control", group_var = groups, plot = TRUE)
output_works <- pcr_analyze(fake_data_highly_expressed, reference_gene = "reference_gene",
reference_group = "control", group_var = groups, plot = TRUE)
output_works <- pcr_analyze(fake_data_highly_expressed, reference_gene = "reference_gene",
reference_group = "control", group_var = groups)
output_works
?pcr_analyze
tidy_ct$dct <- tidy_ct$Tsl - tidy_ct$ref
tidy_ct
tidy_ct$dct <- NULL
tidy_ct$d_ct <- tidy_ct$Tsl - tidy_ct$ref
tidy_ct$dct <- NULL
tidy_ct
res1
nice_plot <- ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(paste(Delta, " ", C[T])))
nice_plot
nice_plot <- ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(paste(Delta, " ", C[T])))
tidy
tidy_ct
tidy_ct$Gene <- group_var
tidy_ct$Gene <- group_var
nice_plot <- ggerrorplot(tidy_ct, x="Gene", y = "rel_exp",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(paste(Delta, " ", C[T])))
nice_plot
nice_plot <- ggerrorplot(tidy_ct, x="Gene", y = "d_ct",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(paste(Delta, " ", C[T])))
nice_plot
grid.arrange(res1, nice_plot, rows = 1)
res1
grid.arrange(res1, nice_plot, nrow = 1)
