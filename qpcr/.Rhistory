y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
lab.size= 4,
lab.pos = "in") +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 4) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 4,
ax.size = 4) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 4,
ax.size = 10) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 4,
font.x = 10) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 4,
font.x = 50) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 4) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 3) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(210, 220, 200, 235),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 3) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(200, 210, 190, 225),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 3) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(200, 210, 200, 225),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 3) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(180, 210, 200, 225),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 3) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(180, 190, 180, 205),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
ggbarplot(nr_assay2, x = "gene", y = "embryos", fill = "class",
position = position_dodge(0.78),
palette = "Paired",
label = TRUE,
xlab = "Gene knocked down",
ylab = "Total no. embryos",
#          lab.pos = "in",
lab.size= 3) +
geom_signif(xmin = c(0.8, 1.8, 2.8, 0.8),
xmax = c(2.2, 3.2, 4.2, 4.2),
annotation=c("***", "***", "***", "n.s."),
y_position = c(180, 190, 180, 200),
tip_length = 0) +
theme(legend.title = element_blank(),
text=element_text(size=10))
citation("pcr")
library(pcr)
citation(pcr)
citation("pcr")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
library("ggplot2")
library("ggsignif")
library("dplyr")
library("gridExtra")
library("effsize")
library("ggpubr")
###########
#FUNCTIONS#
###########
import_data <- function(num){
df <- read.csv(paste(as.character(num), "b_transposed.csv", sep = ""), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
make_df <- function(df, class, bio_rep){
new.df <- NULL #initialize df
for (i in 2:ncol(df)){
new.df <- rbind(new.df, data.frame(raw = df[,i],
tech_rep = colnames(df[i]),
bio_rep = bio_rep,
class = class,
arbit_n = toString(i)))
}
return(new.df)
}
# This assumes input is fine. Default: get the mean, but overridable.
get_technical_means <- function(df, func = mean){
means <- aggregate(df$raw,
list(tech_rep = df$tech_rep,
bio_rep = df$bio_rep,
class = df$class),
FUN = func,
na.rm = TRUE)
}
##########
#GGSTYLES#
##########
gglayer <- list(geom_boxplot(outlier.shape = NA),
geom_signif(comparisons = list(c("tsl-", "egfp-")),
textsize = 5,
test = t.test),
scale_fill_manual(values = c("white", "#EB7F00")),
theme(legend.position = "none"),
xlab(element_blank())
)
vm.width.layer <-   list(ylab("VM width (nm)"),
xlab(element_blank()),
stat_compare_means(aes(group = class), method = "t.test"),
theme(axis.title.x = element_blank()),
ylim(c(0,200))
)
#save for poster
#ggsave("width_plot.png", plot = width_plot, width = (19.5/2), height = 14.6, units = 'cm')
#ggsave("holes_plot.png", plot = holes_plot, width = (19.5/2), height = 14.6, units = 'cm')
#getwd()
########
#SCRIPT#
########
zero.df <- make_df(import_data(0), "tsl-", "zero")
three.df <- make_df(import_data(3), "egfp-", "three")
four.df <- make_df(import_data(4), "egfp-", "four")
five.df <- make_df(import_data(5), "egfp-", "five")
seven.df <- make_df(import_data(7), "tsl-", "seven")
nine.df <- make_df(import_data(9), "tsl-", "nine")
#this is an outlier. Permanently delete it.
five.df <- five.df[!five.df$tech_rep=="17500x_j.tif", ]
#Remove data from the edge of oocytes
remove_zero <- (c("74oox_ad.tif", "5800x_y.tif", "7400x_ac.tif",
"7400x_g.tif", "7400x_h.tif","7400x_u.tif",
"9700x_n.tif"))
remove_three <- c("5800x_l.tif", "13500x_n.tif")
remove_five <- c("7400x_l.tif", "7400x_r.tif", "9700x_m.tif")
remove_seven <- c("74oox_g.tif", "7400x_r.tif")
remove_nine <- c("7400x_b.tif")
meta.df <- NULL
meta.df <- rbind(filter(zero.df, !tech_rep %in% remove_zero),
filter(three.df, !tech_rep %in% remove_three),
four.df,
filter(five.df, !tech_rep %in% remove_five),
filter(seven.df, !tech_rep %in% remove_seven),
filter(nine.df, !tech_rep %in% remove_nine))
means <- get_technical_means(meta.df)
agg_means <- aggregate(means$x,
list(bio_rep = means$bio_rep,
class = means$class),
mean)
#factorise class to hopefully get things in right order for ggplot
means$class <- factor(means$class, levels = c("egfp-", "tsl-"))
agg_means$class <- factor(agg_means$class, levels = c("egfp-", "tsl-"))
#statistics...
biol_cohens <- cohen.d(d = agg_means[agg_means$class == "tsl-",]$x,
f = agg_means[agg_means$class == "egfp-",]$x)
tech_cohens <- cohen.d(d = means[means$class == "tsl-",]$x,
f = means[means$class == "egfp-",]$x)
mean_plot <- ggerrorplot(means, x="class", y = "x",
add = "jitter",
add.params = list(color="darkgrey"),
desc_stat = "mean_sd") +
ggtitle("Technical replicates") +
vm.width.layer
aggregated_plot <- ggerrorplot(agg_means, x="class", y = "x",
#                              add = "jitter",
desc_stat = "mean_sd",
add.params = list(color="darkgrey")) +
#ggtitle("Biological replicates") +
vm.width.layer
aggregated_plot <- ggadd(aggregated_plot, c("jitter"), jitter = .5, color = "grey", alpha = 0.8)
grid.arrange(aggregated_plot, mean_plot, nrow = 1)
edges.df <- rbind(filter(zero.df, tech_rep %in% remove_zero),
filter(three.df, tech_rep %in% remove_three),
filter(five.df, tech_rep %in% remove_five),
filter(seven.df, tech_rep %in% remove_seven),
filter(nine.df, tech_rep %in% remove_nine))
edges_means <- get_technical_means(edges.df)
edges_means$class <- factor(edges_means$class, levels = c("egfp-", "tsl-"))
edges_sd <- get_technical_means(edges.df, func = sd)
edges_sd$class <- factor(edges_sd$class, levels = c("egfp-", "tsl-"))
edges_iqr <- get_technical_means(edges.df, func = IQR)
edges_iqr$class <- factor(edges_iqr$class, levels = c("egfp-", "tsl-"))
edges_cohens <- cohen.d(d = edges_means[edges_means$class == "tsl-",]$x,
f = edges_means[edges_means$class == "egfp-",]$x)
edges_sd_cohens <- cohen.d(d = edges_sd[edges_sd$class == "tsl-",]$x,
f = edges_sd[edges_sd$class == "egfp-",]$x)
means_plot <- ggplot(edges_means, aes(x=class, y=x, fill = class)) +
gglayer +
geom_jitter() +
ggtitle("Mean VM width")
stdev <- ggplot(edges_sd, aes(x=class, y=x, fill = class)) +
gglayer +
geom_jitter() +
ggtitle("Standard deviation of VM width")
interquartile <- ggplot(edges_iqr, aes(x=class, y=x, fill = class)) +
gglayer +
geom_jitter() +
ggtitle("Interquartile range of VM width")
grid.arrange(means_plot, stdev, interquartile, nrow=1)
edges_means$terminal <- "terminal"
means$terminal <- "not terminal"
terminal_data <- rbind(edges_means, means)
overall_t.test <- t.test(x=terminal_data[terminal_data$terminal == "terminal",]$x,
y=terminal_data[terminal_data$terminal == "not terminal",]$x)
overall_cohens <- cohen.d(d=terminal_data[terminal_data$terminal == "terminal",]$x,
f=terminal_data[terminal_data$terminal == "not terminal",]$x)
tmp_2 <- ggerrorplot(terminal_data, x="terminal", y = "x", facet.by = "class",
add = "jitter",
add.params = list(color="darkgrey")) +
vm.width.layer +
stat_compare_means(aes(group = terminal), method = "t.test") +
#ggtitle("Biological replicates") +
ylim(c(0, 350))
tmp_2
f <- read.csv("gaps.csv", sep = ",") #open file with info on gaps/image and membrane length
f$holes_per_nm = f$holes / f$LENGTH
holes_per_nm.df <- data.frame(sample = c("0B", "7B", "9B", "4B", "5B", "3B"),
means = c(mean(f$holes_per_nm[f$Sample=='0B']),
mean(f$holes_per_nm[f$Sample=='7B']),
mean(f$holes_per_nm[f$Sample=='9B']),
mean(f$holes_per_nm[f$Sample=='4B']),
mean(f$holes_per_nm[f$Sample=='5B']),
mean(f$holes_per_nm[f$Sample=='3B'])
),
trt = c("tsl-", "tsl-", "tsl-", "egfp-", "egfp-", "egfp-")
)
holes_per_nm.df$trt <- factor(holes_per_nm.df$trt, levels = c("egfp-", "tsl-"))
holes_test <- t.test(x = c(mean(f$holes_per_nm[f$Sample=='0B']),
mean(f$holes_per_nm[f$Sample=='7B']),
mean(f$holes_per_nm[f$Sample=='9B'])),
y = c(mean(f$holes_per_nm[f$Sample=='4B']),
mean(f$holes_per_nm[f$Sample=='5B']),
mean(f$holes_per_nm[f$Sample=='3B'])),
var.equal = FALSE
)
holes_cohen <- cohen.d(d = c(mean(f$holes_per_nm[f$Sample=='0B']),
mean(f$holes_per_nm[f$Sample=='7B']),
mean(f$holes_per_nm[f$Sample=='9B'])),
f = c(mean(f$holes_per_nm[f$Sample=='4B']),
mean(f$holes_per_nm[f$Sample=='5B']),
mean(f$holes_per_nm[f$Sample=='3B']))
)
holes_plot_1 <- ggplot(holes_per_nm.df, aes(x = trt, y = means * 1000, fill = trt)) +
gglayer +
ylab(expression(paste("Holes per ", mu, "m")))
holes_per_nm.df$means <- holes_per_nm.df$means * 1000
holes_plot <- ggerrorplot(holes_per_nm.df, x="trt", y = "means",
add = "jitter",
add.params = list(jitter = .5, color = "grey", alpha = 0.8),
desc_stat = "mean_sd") +
stat_compare_means(method = "t.test") +
ylab(expression(paste("Holes per ", mu, "m"))) +
theme(axis.title.x = element_blank())
holes_plot
getwd()
setwd(".")
getwd9)
getwd()
#setwd("~/Documents/tsl-project/qpcr/")
ct1 <- readr::read_csv("st_qPCR_1.30.18.csv")
?setwd
this.dir <- dirname(parent.frame(2)$ofile)
set_wd <- function() {
library(rstudioapi) # make sure you have it installed
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
}
set_wd()
#setwd("~/Documents/tsl-project/qpcr/")
ct1 <- readr::read_csv("st_qPCR_1.30.18.csv")
ct1
source('~/Documents/tsl-project-scripts/qpcr/tsl-qpcr-analysis.R', echo=TRUE)
res1
nice_plot
pcr_test(tidy_ct, group_var = group_var,
reference_gene = 'ref',
reference_group = "egfp",
test = "wilcox.test")
tidy_ct$Gene <- group_var
nice_plot <- ggerrorplot(tidy_ct, x="Gene", y = "d_ct",
add = "jitter", desc_stat = "mean_ci") +
stat_compare_means(aes(group = Gene), method = "t.test") +
ylab(expression(paste(Delta, " ", C[T])))
nice_plot
res1
source('~/Documents/tsl-project-scripts/qpcr/tsl-qpcr-analysis.R', echo=TRUE)
nice_plot
?ggerrorplot
spliced <- data.frame(trt = rep(c("c355>Dm-tsl", "c355>Nv-tsl"), each = 3),
num = c(7.74, 7.82, 7.74,
1.94, 2.5, 2.64))
spliced_plot <- ggerrorplot(spliced, x= "trt", y = "num") +
plt + ylab("Average number of denticle belts missing") + ylim(0, 8)
spliced_plot
plt <- list(geom_jitter(width = 0.3, height = 0.02, alpha = 0.5),
xlab("Genotype"))
spliced <- data.frame(trt = rep(c("c355>Dm-tsl", "c355>Nv-tsl"), each = 3),
num = c(7.74, 7.82, 7.74,
1.94, 2.5, 2.64))
spliced_plot <- ggerrorplot(spliced, x= "trt", y = "num") +
plt + ylab("Average number of denticle belts missing") + ylim(0, 8)
spliced_plot
plt <- list(geom_jitter(width = 0.3, height = 0.0, alpha = 0.5),
xlab("Genotype"))
spliced <- data.frame(trt = rep(c("c355>Dm-tsl", "c355>Nv-tsl"), each = 3),
num = c(7.74, 7.82, 7.74,
1.94, 2.5, 2.64))
spliced_plot <- ggerrorplot(spliced, x= "trt", y = "num") +
plt + ylab("Average number of denticle belts missing") + ylim(0, 8)
spliced_plot
posterior_rescue <- data.frame(trt = c("Slbo>Dm-tsl, tsl∆",
"Slbo>Dm-tsl, tsl∆",
"Slbo>Dm-tsl, tsl∆",
"Slbo>Nv-tsl, tsl∆",
"Slbo>Nv-tsl, tsl∆",
"Slbo>Nv-tsl, tsl∆"),
num = c(4, 4, 0,
0, 0, 0))
posterior_rescue$position <- "Posterior"
posterior_rescue_plot <- ggerrorplot(posterior_rescue, x = "trt", y = "num") +
plt +
ylab("% Posterior Rescue") + ylim(0, 70)
anterior_rescue <- data.frame(trt = c("Slbo>Dm-tsl, tsl∆",
"Slbo>Dm-tsl, tsl∆",
"Slbo>Dm-tsl, tsl∆",
"Slbo>Nv-tsl, tsl∆",
"Slbo>Nv-tsl, tsl∆",
"Slbo>Nv-tsl, tsl∆"),
num = c(46, 64, 54,
0, 0, 0))
anterior_rescue$position <- "Anterior"
anterior_rescue_plot <- ggerrorplot(anterior_rescue, x = "trt", y = "num") +
plt +
ylab("% Anterior Rescue")
anterior_rescue_plot
rescue <- rbind(anterior_rescue, posterior_rescue)
rescue_plot <- ggerrorplot(rescue, x = "trt", y = "num", facet.by="position") +
plt +
ylab("% Rescue") +
stat_compare_means(method = "t.test")
rescue_plot
nice_plot + geom_jitter(width = 0.3, height = 0.0, alpha = 0.5)
nice_plot
tidy_ct
cohen.d(d = tidy_ct[agg_means$gene == "tsl",]$d_ct,
f = tidy_ct[agg_means$gene == "egfp",]$d_ct)
tidy_ct[agg_means$gene == "tsl",]$d_ct
tidy_ct[agg_means$Gene == "tsl",]$d_ct
cohen.d(d = tidy_ct[tidy_ct$Gene == "tsl",]$d_ct,
f = tidy_ct[tidy_ct$Gene == "egfp",]$d_ct)
means
agg_means
t.test(agg_means, conf.level = 0.95)
t.test(agg_means$x, conf.level = 0.95)
t.test(agg_means[agg_means$class == "egfp-"]$x, conf.level = 0.95)
[agg_means$class == "egfp-"]
agg_means[agg_means$class == "egfp-"]
agg_means$class
agg_means$class == "egfp-"
agg_means[agg_means$class == "egfp-"]
agg_means[agg_means$class == "egfp-"]$x
agg_means$x
agg_means$x[agg_means$class == "egfp-"]
t.test(agg_means$x[agg_means$class == "egfp-"])
