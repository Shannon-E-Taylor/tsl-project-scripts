library("ggplot2")
library("ggsignif")
library("dplyr")
library("gridExtra")
library("effsize")
library("ggpubr")
###########
#FUNCTIONS#
###########
import_data <- function(num){
df <- read.csv(paste(as.character(num), "b_transposed.csv", sep = ""), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
make_df <- function(df, class, bio_rep){
new.df <- NULL #initialize df
for (i in 2:ncol(df)){
new.df <- rbind(new.df, data.frame(raw = df[,i],
tech_rep = colnames(df[i]),
bio_rep = bio_rep,
class = class,
arbit_n = toString(i)))
}
return(new.df)
}
# This assumes input is fine. Default: get the mean, but overridable.
get_technical_means <- function(df, func = mean){
means <- aggregate(df$raw,
list(tech_rep = df$tech_rep,
bio_rep = df$bio_rep,
class = df$class),
FUN = func,
na.rm = TRUE)
}
##########
#GGSTYLES#
##########
gglayer <- list(geom_boxplot(outlier.shape = NA),
geom_signif(comparisons = list(c("tsl-", "egfp-")),
textsize = 5,
test = t.test),
scale_fill_manual(values = c("white", "#EB7F00")),
theme(legend.position = "none"),
xlab(element_blank())
)
vm.width.layer <-   list(ylab("VM width (nm)"),
xlab(element_blank()),
stat_compare_means(aes(group = class), method = "t.test"),
theme(axis.title.x = element_blank()),
ylim(c(0,200))
)
#save for poster
#ggsave("width_plot.png", plot = width_plot, width = (19.5/2), height = 14.6, units = 'cm')
#ggsave("holes_plot.png", plot = holes_plot, width = (19.5/2), height = 14.6, units = 'cm')
#getwd()
zero.df <- make_df(import_data(0), "tsl-", "zero")
df <- read.csv(paste(as.character(num), ".csv", sep = ""), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
import_data <- function(num){
df <- read.csv(paste(as.character(num), ".csv", sep = ""), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
zero.df <- make_df(import_data("zero"), "tsl-", "zero")
zero.df <- make_df(import_data("one"), "tsl-", "zero")
import_data("one")
import_data <- function(num){
df <- read.csv(paste(as.character(num), ".csv", sep = "\t"), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
import_data <- function(num){
import_data("one")
import_data("One")
import_data("one")
df <- read.csv(paste(as.character(num), ".csv", sep = ","), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
import_data <- function(num){
df <- read.csv(paste(as.character(num), ".csv", sep = ","), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
import_data <- function(num){
df <- read.csv(paste(as.character(num), ".csv", sep = ""), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
import_data("one")
?read.csv
df <- read.csv(paste(as.character(num), ".csv", sep = ""), #transposed data
sep = "\t"
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
import_data <- function(num){
df <- read.csv(paste(as.character(num), ".csv", sep = ""), #transposed data
sep = "\t",
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
import_data("one")
make_df("one")
zero.df <- make_df(import_data("one"), "tsl-", "zero")
zero.df
library("ggplot2")
library("ggsignif")
library("dplyr")
library("gridExtra")
library("effsize")
library("ggpubr")
###########
#FUNCTIONS#
###########
import_data <- function(num){
df <- read.csv(paste(as.character(num), "b_transposed.csv", sep = ""), #transposed data
na.strings = c(0.000, "0.000"), #na.strings to get rid of blank values
check.names = FALSE  #keeps names from same variable identical
)
return (df)
}
make_df <- function(df, class, bio_rep){
new.df <- NULL #initialize df
for (i in 2:ncol(df)){
new.df <- rbind(new.df, data.frame(raw = df[,i],
tech_rep = colnames(df[i]),
bio_rep = bio_rep,
class = class,
arbit_n = toString(i)))
}
return(new.df)
}
# This assumes input is fine. Default: get the mean, but overridable.
get_technical_means <- function(df, func = mean){
means <- aggregate(df$raw,
list(tech_rep = df$tech_rep,
bio_rep = df$bio_rep,
class = df$class),
FUN = func,
na.rm = TRUE)
}
##########
#GGSTYLES#
##########
gglayer <- list(geom_boxplot(outlier.shape = NA),
geom_signif(comparisons = list(c("tsl-", "egfp-")),
textsize = 5,
test = t.test),
scale_fill_manual(values = c("white", "#EB7F00")),
theme(legend.position = "none"),
xlab(element_blank())
)
vm.width.layer <-   list(ylab("VM width (nm)"),
xlab(element_blank()),
stat_compare_means(aes(group = class), method = "t.test"),
theme(axis.title.x = element_blank()),
ylim(c(0,200))
)
#save for poster
#ggsave("width_plot.png", plot = width_plot, width = (19.5/2), height = 14.6, units = 'cm')
#ggsave("holes_plot.png", plot = holes_plot, width = (19.5/2), height = 14.6, units = 'cm')
#getwd()
import_data
zero.df
getwd()
setwd("~/Documents/tsl-project-scripts/")
########
#SCRIPT#
########
setwd("~/Documents/tsl-project-scripts/")
zero.df <- make_df(import_data(0), "tsl-", "zero")
zero.odf
zero.df
meta.df <- rbind(filter(zero.df, !tech_rep %in% remove_zero),
filter(three.df, !tech_rep %in% remove_three),
four.df,
filter(five.df, !tech_rep %in% remove_five),
filter(seven.df, !tech_rep %in% remove_seven),
filter(nine.df, !tech_rep %in% remove_nine))
getwd()
